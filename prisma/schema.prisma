generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ! ----- MODELS FOR USER ----- !

model user {
  id        String          @id @default(cuid())
  email     String          @unique
  fristName String
  lastName  String
  password  String
  token     sessiontoken[]
  tickets   sessionticket[]
  wallet    wallet[]
}

model wallet {
  id       String @id @default(cuid())
  userData user   @relation(fields: [email], references: [email])
  email    String @unique
  Amount   Int    @default(0)
}

model sessiontoken {
  id       Int    @id @default(autoincrement())
  token    String @unique
  userData user   @relation(fields: [userId], references: [id])
  userId   String
}

// ! ----- MODELS FOR MOVIES ----- !
model moviecinema {
  id       String  @unique @default(cuid())
  cinema   cinema @relation(fields: [cinemaID], references: [id])
  movie    movies @relation(fields: [movieId], references: [id])
  movieId  Int
  cinemaID Int

  @@id([movieId, cinemaID]) 
}

model movies {
  id         Int             @id @unique @default(autoincrement())
  movieName  String          @unique
  decription String
  time       String
  price      Int
  createdAt  String
  Tickets    sessionticket[]
  cinemaData moviecinema[]
  image       images[]
}

model row {
  id            Int           @unique @default(autoincrement())
  row           Int
  selectedSeats String
  tickets       sessionticket @relation(fields: [ticket], references: [ticket])
  ticket        Int
}

// ! ----- MODELS FOR TICKETS ----- !

model sessionticket {
  ticket     Int      @unique
  userData   user     @relation(fields: [email], references: [email])
  email      String
  movieData  movies   @relation(fields: [movieId], references: [id])
  movieId    Int
  useTicket  Boolean  @default(false)
  rows       row[]
  cinemaData cinema   @relation(fields: [cinemaID], references: [id])
  cinemaID   Int
  hallData   hall     @relation(fields: [hallID], references: [id])
  hallID     Int
  dateEvent  date     @relation(fields: [date], references: [date])
  date       DateTime
  Time       String
  price      Int
}

// ! ----- MODELS FOR CINEMA ----- !

model cinema {
  id         Int             @unique @default(autoincrement())
  cinemaName String
  address    String
  city       String
  province   String
  halls      hall[]
  movies     moviecinema[] 
  tickets    sessionticket[]
  dates      date[]
  image       images[]
}

model hall {
  id          Int             @unique @default(autoincrement())
  hallName    String
  maximumRows Int
  cinemaData  cinema          @relation(fields: [cinemaID], references: [id])
  cinemaID    Int
  tickets     sessionticket[]
}

model date {
  id         Int             @id @default(autoincrement())
  date       DateTime        @unique
  cinemaData cinema          @relation(fields: [cinemaID], references: [id])
  cinemaID   Int
  tickets    sessionticket[]
}


// ! ----- MODELS FOR IMAGES ----- !

model images {
  id        String  @id @default(cuid())
  name      String  @unique
  url       String
  createdAt DateTime? @default(now())
  movieData movies? @relation(fields: [movieId], references: [id])
  movieId   Int?
  cinemaData cinema? @relation(fields: [cinemaID], references: [id])
  cinemaID  Int?
}
